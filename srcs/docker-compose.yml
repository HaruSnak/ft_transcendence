services:
    chat-service:
        container_name: chat-service
        build: ./requierements/services/chat-service
        env_file: .env
        networks:
            - app_network
            - promgraf_network
        restart: unless-stopped

    game-service:
        container_name: game-service
        build: ./requierements/services/game-service
        env_file: .env
        networks:
            - app_network
            - promgraf_network
        restart: unless-stopped

    user-service:
        container_name: user-service
        build: ./requierements/services/user-service
        env_file: .env
        volumes:
            - user-service-data:/srcs/data
        networks:
            - app_network
            - promgraf_network
        restart: unless-stopped

    auth-service:
        container_name: auth-service
        build: ./requierements/services/auth-service
        env_file: .env
        networks:
            - app_network
            - promgraf_network
        restart: unless-stopped

    nginx:
        container_name: nginx
        build:
            context: ./requierements
            dockerfile: nginx/Dockerfile
        volumes:
            - ./requierements/frontend:/usr/share/nginx/html
            - ./requierements/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
        ports:
            - "8443:443"
        depends_on:
            - chat-service
            - game-service
            - user-service
            - auth-service
        networks:
            - app_network
        restart: unless-stopped

    elasticsearch:
        container_name: elasticsearch
        build: ./requierements/elk/elasticsearch
        env_file: .env
        environment:
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        volumes:
            - es_data:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
            - "9300:9300"
        networks:
            - elk_network
        restart: unless-stopped

    logstash:
        container_name: logstash
        build: ./requierements/elk/logstash
        env_file: .env
        volumes:
            - logs_pipeline:/usr/share/logstash/pipeline
            - logs_config:/usr/share/logstash/config
        ports:
            - "5044:5044"
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - elasticsearch.username=${LOGSTASH_USERNAME}
            - elasticsearch.password=${LOGSTASH_PASSWORD}
            - xpack.monitoring.enabled=false
        networks:
            - elk_network
        depends_on:
            - elasticsearch
        restart: unless-stopped

    kibana:
        container_name: kibana
        image: docker.elastic.co/kibana/kibana:8.15.0
        env_file: .env
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - elasticsearch.username=${KIBANA_USERNAME}
            - elasticsearch.password=${KIBANA_PASSWORD}
        ports:
            - "5601:5601"
        networks:
            - elk_network
        depends_on:
            - elasticsearch
        restart: unless-stopped

    prometheus:
        container_name: prometheus
        image: prom/prometheus:latest
        ports:
            - "9090:9090"
        volumes:
            - prometheus_db:/prometheus
            - ./requierements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        networks:
            - promgraf_network
        restart: unless-stopped

    grafana:
        container_name: grafana
        image: grafana/grafana:latest
        env_file:
            - .env
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        ports:
            - "3010:3000"
        volumes:
            - grafana_db:/var/lib/grafana
            - ./requierements/grafana/provisioning:/etc/grafana/provisioning
        networks:
            - promgraf_network
        restart: unless-stopped

volumes:
    es_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ./volumes/es_data
    logs_pipeline:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ./volumes/logstash/logs_pipeline
    logs_config:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ./volumes/logstash/logs_config
    prometheus_db:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ./volumes/prometheus_db
    grafana_db:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ./volumes/grafana_db
    user-service-data:
        driver: local

networks:
    elk_network:
        driver: bridge
    promgraf_network:
        driver: bridge
    app_network:
        driver: bridge